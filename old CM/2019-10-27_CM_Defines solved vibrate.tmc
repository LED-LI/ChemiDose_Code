//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Name:        CM_Defines.tmc
//
// Description: CM software parameters
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Changes: 
//    1. V2010001 initial SW
//    2. V2010002 After rework for separate DIR for capHolder. swappes out3 and out
//    3. 
//    4. 
//    5. 
//    6. 
//    7. 
//    8. 
//    9. 
//   10. 
//   12. 
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CURRENT_VERSION      =  2010002

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Definitions of motor numbers & home sensors
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

M_verticalMotor    = 0    // refL                    up down
M_linearMotor      = 1    // refL, refR              linear movement between vials
M_armMotor         = 2    // refL                    move vials from top to bottom
M_pistonMotor      = 3    // refL, syringe           fill syringe
M_headRotateMotor  = 4    // refL, rotatingSpare     rotate head top to bottom
M_disposeMotor     = 5    // refL                    push vials out from the machine
//M_capHolderMotor =6     // sensor at In_capHolderHome. separate motor driver

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Definitions of Inputs
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

In_capHolderHome       = 0 //
In_1                   = 1 // Home switch input for motor 0 vertical
In_linearHome          = 2 // Home switch input for motor 1 linear
In_salineBag           = 3 // Home switch input for motor 2 arm
In_slidingDoor         = 4 // 
In_drawerOverflow      = 5 // Home switch input for motor 3 piston
In_NeedleDetected      = 6 // Home switch input for motor 4 rotate  0 = Needle out; 1 = needle in
In_7                   = 7 // Home switch input for motor 5 dispose

// bottles sensors via relay multiplexers

InX_bottle0            = 0 //
InX_bottle1            = 1 // 
InX_bottle2            = 2 // 
InX_bottle3            = 3 // 
InX_bottle4            = 4 // 
InX_bottle5            = 5 // 
InX_mux6               = 6 // 
InX_mux7               = 7 // 

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Definitions of Outputs
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Out_GreenLED           = 0 //  yellow color when both red and green are on
Out_RedLED             = 1 //  
Out_PulseCapHolder     = 2 //  for capHolder motor
Out_VibrateDIR         = 3 //  outputs DIR for 2 vibrators
Out_CAPHolderDIR_Down  = 4 //  1A  output DIR for for capHolderMotor
Out_enaVibrate_0       = 5 //  enable vibrator 0 (bottle   4)
Out_enaVibrate_1       = 6 //  enable vibrator 1 (bottles 56)
Out_Multiplexer        = 7 //  1A AND drawer enable

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Defines
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
VIAL_IS_LOADED        =    1
SYRINGE_IN_PLACE      =    1
ANY_ERROR_EXISTS      =    1
WAIT_TICKS_200ms      =   20 // [200ms]
WAIT_TICKS_VERY_SHORT =  100 // [ 1s]
WAIT_TICKS_SHORT      =  200 // [ 2s]
WAIT_TICKS_NEEDLE     =  400 // [ 4s]
WAIT_TICKS            = 1000 // [10s]
WAIT_TICKS_LONG       = 1500 // [15s]
CAP_HOLDER_AT_HOME    =    1
BELOW_VIAL_COORD      =    7 ///
ABOVE_CAP_COORD       =    8 ///
LED_ON                =    1
LED_OFF               =    0
DEF_DRAW_WAIT_TIME    =  200   // default for 25 mm needle length and 22 Gauge = 2[s]
DEFAULT_NEEDLE_LENGTH =   25
DEFAULT_DRAW_VOLUME   = 1000  // 1[ml]
CAP_SENSOR_BLOCKED    =    0
MINIMUM_DRAW_VOLUME   =  100  // not less than 0.1 ml
//CM

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// User variables map (bank 2)
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// prameters from Trinamic to PC:
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

GB_currentVersion            =   0    // Current SW version

GB_Syringe_Type              =   1    //
  DEFAULT_SYRINGE_TYPE  =  1
  BD_Plastipak_20       =  1   
  Nipro_12              =  2   
  BD_Plastipak_10       =  3  
  Syringe_4             =  4
  Syringe_5             =  5
  Syringe_6             =  6
  Syringe_7             =  7
  Syringe_8             =  8
  Syringe_9             =  9
  Syringe_10            = 10

GB_2                         =   2  // = 200 = 2[s]
GB_InitDone                  =   3  // INIT (func 0) done. starts automaticaly
GB_4                         =   4  // 

// SW states
GB_CurrentState              =   5  // defines the current state of the process
  WAITING_INIT_DRAW_DOSE = 10       // this the state after the power up as well
  RUNNING_INIT_DRAW_DOSE = 20
  WAITING_DRAW_DOSE      = 30       // at this state it is possible as well to run INIT_DRAW_DOSE (6)
  RUNNING_DRAW_DOSE      = 40
  WAITING_CHECK_DONE     = 50
  RUNNING_CHECK_DONE     = 60
  STOPPED_ON_ERROR       = 70
  STOPPED_TIME_OUT       = 80
  ABORTED                = 90


GB_RobotSerialNumber        =   6    // (2030006)  2 = CM, 03 = HW ver,  0006 = machine #)

// the following 3 global parameters will appear at motor 0 (vertical)
//  GB_VerticalHomePos      =   7    // position for rotation adjustment
//  GB_LoadingHight         =   8    // syringe loading
//  GB_BumpPosVert          =   9    // needle touches the vial rubber

GB_needleLength            =  10    // 16, 25, 38 [mm]
GB_needleGauge             =  11    // 18, 21, 22, 23 [gauge]
GB_cyclesTotal             =  12    //
GB_13                      =  13    //
GB_readyToDraw             =  14    // after verifyReady
GB_15                      =  15    // 
GB_MotorIsMoving           =  16    //
GB_17                      =  17    //
GB_HomingDone              =  18    //

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//  prameters from PC to Trinamic:
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

GB_UnitsToMoveManual       =  19    // for manual movement, put here the microMeter or Mili Degree to move (+/-)
GB_20                      =  20    // 
GB_airToPullBefore         =  21    // in Percentage. Normal is 70%. Should be reduced when vial is full
GB_22                      =  22    // 
GB_23                      =  23    // 
GB_24                      =  24    // 
GB_motorNumForHome         =  25    // 0=vertical, 1=linear, 2=cap, 3=piston, 4=rotate, 5=dispose, 6=capHolder
GB_26                      =  26    //
GB_microLtoWithdraw        =  27    // microL to withdraw.

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Errors
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

GB_errors_needle_syringe   =  28
 // bit errors for parameter 28
    BitEr_g1                  = %00000000001 // bit    1  left ref sensor
    BitEr_syringePoppedOut    = %00000000010 // bit    2  syringe popped out during cycle
    BitEr_g3                  = %00000000100 // bit    4  vial popped out during cycle
    BitEr_g4                  = %00000001000 // bit    8
    BitEr_g5                  = %00000010000 // bit   16
    BitEr_machineAborted      = %00000100000 // bit   32
    BitEr_needleBentRotate    = %00001000000 // bit   64
    BitEr_g8                  = %00010000000 // bit  128
    BitEr_g9                  = %00100000000 // bit  256
    BitEr_needleBentCap       = %01000000000 // bit  512
    BitEr_capSensorBlocked    = %10000000000 // bit 1024  check that the vertical did not move down on the cap holder

GB_any_Error               =  29    // any error occured

GB_errors_M_verticalMotor       = 30
GB_errors_M_linearMotor         = 31
GB_errors_M_armMotor            = 32
GB_errors_M_pistonMotor         = 33
GB_errors_M_headRotateMotor     = 34
GB_errors_M_disposeMotor        = 35
GB_errors_M_capHolderMotor      = 36
//  motor errors for each of parameters 30-36 Motors
    BitEr_leftRefSensor  =  %00000001 // bit   1  left ref sensor
    BitEr_rightRefSensor =  %00000010 // bit   2  right ref sensor
    BitEr_homeNotFound   =  %00000100 // bit   4  did not find home
    BitEr_TimeOut        =  %00001000 // bit   8
    BitEr_calibrationErr =  %00010000 // bit  16
    BitEr_m6             =  %00100000 // bit  32
    BitEr_m7             =  %01000000 // bit  64
    BitEr_m8             =  %10000000 // bit 128

GB_errors_Vial_0                = 37
GB_errors_Vial_1                = 38
GB_errors_Vial_2                = 39
GB_errors_Vial_3                = 40
GB_errors_Vial_4                = 41
GB_errors_Vial_5                = 42
 // bit errors for parameter 37-42 Vials
    BitEr_v1                = %00000000001 // bit    1  
    BitEr_VialMissing       = %00000000010 // bit    2  
    BitEr_VialPoppedOut     = %00000000100 // bit    4  vial popped out during cycle
    BitEr_v4                = %00000001000 // bit    8
    BitEr_v5                = %00000010000 // bit   16
    BitEr_v6                = %00000100000 // bit   32
    BitEr_v7                = %00001000000 // bit   64
    BitEr_v8                = %00010000000 // bit  128

GB_errors_findHome              = 43
 // bit errors for parameter 43
    BitEr_syringeIsInwhileFindHome      =  %00000001 // bit   1
    BitEr_h2                            =  %00000010 // bit   2
    BitEr_capHolderIsInWhileFindHome    =  %00000100 // bit   4
    BitEr_h4                            =  %00001000 // bit   8
    BitEr_h5                            =  %00010000 // bit  16
    BitEr_h6                            =  %00100000 // bit  32
    BitEr_h7                            =  %01000000 // bit  64
    BitEr_h8                            =  %10000000 // bit 128

GB_errors_wrong_PC_command      = 44
 // bit errors for parameter 44
    BitEr_expecting_GP5_10_OR_30        =  %00000001 // bit   1
    BitEr_expecting_WAITING_DRAW_DOSE   =  %00000010 // bit   2
    BitEr_expecting_WAITING_CHECK_DONE  =  %00000100 // bit   4
    BitEr_vibrateParemeterError         =  %00001000 // bit   8
    BitEr_c5                            =  %00010000 // bit  16
    BitEr_c6                            =  %00100000 // bit  32
    BitEr_c7                            =  %01000000 // bit  64
    BitEr_c8                            =  %10000000 // bit 128

GB_special_Error                =  45   
//  motor errors for each of parameter 45
    BitEr_SyringeIsIn         =  %00000001 // bit   1  FIND_HOMES error or INIT_DRAW_DOSE, Syringe is in the system
    BitEr_SyringeMissing      =  %00000010 // bit   2  DRAW_DOSE error, missing the syringe
    BitEr_s2                  =  %00000100 // bit   4  DRAW_DOSE error, missing the vial
    BitEr_volumeExceedsLimits =  %00001000 // bit   8
    BitEr_s4                  =  %00010000 // bit  16
    BitEr_s5                  =  %00100000 // bit  32
    BitEr_s6                  =  %01000000 // bit  64
    BitEr_s7                  =  %10000000 // bit 128

// the following global parameters will appear at their motor
// GB_RecapPositionlinear          = 46   // to hold the cap for recap
// GB_ArmHomePosition              = 47   // cap holder is under the syringe
// GB_PistonHomePos                = 48   // for empty syringe
// GB_HeadRotateHomePos            = 49   // center of syringe cap
// GB_CenterOfVial                 = 50   // at the top

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Syringe parameters
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Syringe_1 = BD_Plastipak_20
Max_Volume_1         = 20000  // [uL]
microL_per_100mm_1   = 29200  // [uL]
Syring_Length_1      =118000  // [um]
LoadingDistance_1    =105000  // [usteps]6

// Syringe_2 = Nipro_12
Max_Volume_2         = 12000  // [uL]
microL_per_100mm_2   = 18400  // [uL]
Syring_Length_2      =110000  // [um]
LoadingDistance_2    = 93000  // [usteps]

// Syringe_3 = BD_Plastipak_10
Max_Volume_3         = 10000  // [uL]
microL_per_100mm_3   = 16800  // [uL]
Syring_Length_3      =107000  // [um]
LoadingDistance_3    = 95000  // [usteps]

// Syringe_4 = Other_4
Max_Volume_4         = 0  // [uL]
microL_per_100mm_4   = 0  // [uL]
Syring_Length_4      = 0  // [um]
LoadingDistance_4    = 0  // [usteps]

// Syringe_5 = Other_5
Max_Volume_5         = 0  // [uL]
microL_per_100mm_5   = 0  // [uL]
Syring_Length_5      = 0  // [um]
LoadingDistance_5    = 0  // [usteps]

// Syringe_6 = Other_6
Max_Volume_6         = 0  // [uL]
microL_per_100mm_6   = 0  // [uL]
Syring_Length_6      = 0  // [um]
LoadingDistance_6    = 0  // [usteps]

// Syringe_7 = Other_7
Max_Volume_7         = 0  // [uL]
microL_per_100mm_7   = 0  // [uL]
Syring_Length_7      = 0  // [um]
LoadingDistance_7    = 0  // [usteps]

// Syringe_8 = Other_8
Max_Volume_8         = 0  // [uL]
microL_per_100mm_8   = 0  // [uL]
Syring_Length_8      = 0  // [um]
LoadingDistance_8    = 0  // [usteps]

// Syringe_9 = Other_9
Max_Volume_9         = 0  // [uL]
microL_per_100mm_9   = 0  // [uL]
Syring_Length_9      = 0  // [um]
LoadingDistance_9    = 0  // [usteps]

// Syringe_10 = Other_10
Max_Volume_10         = 0  // [uL]
microL_per_100mm_10   = 0  // [uL]
Syring_Length_10      = 0  // [um]
LoadingDistance_10    = 0  // [usteps]

// current syringe
GB_Max_Volume_current        = 51
GB_microL_per_100mm_current  = 52
GB_Syring_Length_current     = 53
GB_LoadingDistance_current   = 54

GB_55                        = 55


// 55 is the last GB that can also be stored permanently in the EEPROM

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// motor parameters
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// GB_Motor_0 = M_verticalMotor
   verticalFeedPerRevolution       =  4877  /// micrometer
   verticalMicrosteps              =    16  ///
   verticalStepsPerRev             =   200  ///
   verticalMicroStepsPerRev        = verticalMicrosteps * verticalStepsPerRev  /// = 3200 [uS/rev]
   verticalMicroStepsPerMM         = 1000 * verticalMicroStepsPerRev / verticalFeedPerRevolution /// = 656
   VERTICAL_POS_COORD              =    10
   GB_VerticalHomePos        =  7           // position for rotation adjustment  ~1100
   GB_LoadingHight           =  8           // syringe loading  ~700
   DECAP_HEIGHT_DELTA              = -5040  // decapheight & needle check relative to loading height
   VERTICAL_BACK_TO_CENTER         =  -945  // move head down into cap, where we adjust back to center
   VERTICAL_FOR_ROTATION           = 14500  /// ABS
   VERTICAL_FOR_NEEDLE             = 12000  // REL
   VERTICAL_IN_VIAL                =  7700  // ABS  -4000  //-3800  // up 175[uS]=1.4[mm]//-3625  //z REL
   STOP_CHECK_DIPPER_VERTICAL      =  4000  // 3000  //  delta from deepest vertical in dose (GP 17)
   GB_BumpPosVert           =   9           // needle touches the vial rubber  ~9100
   MAX_CURRENT_VERT                =   200
   MAX_CURRENT_VERT_HIGH           =   255
   STBY_CURRENT_VERT               =   100  ///
   MAX_POS_SPEED_VER_ROT           =  1300  /// needs same speed for vertical and rotation for coordinated move
   MAX_POS_SPEED_VER_INTO_CAP      =   600  //
   MAX_POS_SPEED_VER_TO_VIAL       =   200
   MAX_POS_SPEED_VER_DOWN          =  1200
   MAX_POS_SPEED_VER_HIGH          =  1000
   ACC_VERT                        =    10  ///
   ACC_VERT_HIGH                   =    40
   SEARCH_SPEED_VERT               =   400  ///
   SWITCH_SPEED_VERT               =   400  ///

GB_needleLengthInMicroSteps   = 60 /// verticalMicroStepsPerMM * GB_needleLength = 5039 [steps] for 40 [mm]
GB_61                         = 61
GB_62                         = 62
GB_63                         = 63
GB_64                         = 64

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// GB_Motor_1 = M_linearMotor
   linearFeedPerRevolution      = 25400 // micrometer  
   linearMicrosteps             =    16 //
   linearStepsPerRev            =   200 //
   linearMicroStepsPerRev       = verticalMicrosteps * verticalStepsPerRev  /// = 3200 [uS/rev]
   linearMicrostepsPerMM        = 1000 * linearMicroStepsPerRev / linearFeedPerRevolution /// = 126
   LINEAR_POS_COORD             =     1
   STBY_CURRENT_LINEAR          =     25 //
   STBY_CURRENT_LINEAR_HIGH     =   150
   MAX_POS_SPEED_LINEAR         =   500 //
   ACC_LINEAR                   =    10 //
   SEARCH_SPEED_LINEAR          =   200 //
   SWITCH_SPEED_LINEAR          =    50 //
   MAX_CURRENT_LINEAR           =   128 //
   MAX_CURRENT_LINEAR_HIGH      =   200

GB_65                       = 65
GB_66                       = 66
GB_67                       = 67
GB_68                       = 68
GB_69                       = 69

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// GB_Motor_2 = M_armMotor
   armGearRatio              =    10
   armMicrosteps             =    16
   armStepsPerRev            =   200
   armRotationRadius         =   134  // mm
   DegreePerRev              =   360
   armMicroStepsPerRev       = armGearRatio * armMicrosteps * armStepsPerRev    // =32000
   armMicrostepsPerDeg       = armMicroStepsPerRev / DegreePerRev // 89
   armMicroStepsPerMM        = armMicroStepsPerRev /(2 * armRotationRadius * 314 / 100)  /// 40 [us/mm]
   ARM_POS_COORD             =     2
   GB_ArmHomePosition        =    47 // arm holder is under the syringe  ~2400
   STBY_CUR_ARM              =   100 //25 
   STBY_CUR_ARM_HIGH         =   200
   MAX_POS_SPEED_ARM         =    50  // 400 
   ACC_ARM                   =    10  //  60  
   ARM_HOLDER_RELATIVE_RFS   =    40 
   GB_NeedleAtARMOffset      =    55     // offset from ARM sensor finds needle position to true center of ARM holder (50)
   SEARCH_SPEED_ARM          =    50  // 400 
   SWITCH_SPEED_ARM          =    20 
   SEARCH_SPEED_ARM_SLOW     =    50 
   SWITCH_SPEED_ARM_SLOW     =    20  //  30
   WAIT_ARM_REF              =    70  // 0.7s 
   MAX_CURRENT_ARM           =   128 
   limitUMbentNeedleArm      =  3000  // 2000 // [um]
   limitArmBentMicroS        = armMicroStepsPerMM * limitUMbentNeedleArm / 1000  /// 3.00 [mm] // 2.00 [mm] = 81 us

GB_armMicroStepsPerMM        = 70 
GB_limitarmBentMicroS        = 71 
GB_NeedleArmError            = 72   // error of needle at calholder position
GB_73                        = 73
GB_74                        = 74


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// GB_Motor_3 = M_pistonMotor
   pistonFeedPerRevolution       =  4877  // micrometer
   pistonStepsPerRev             =   200
   pistonMicrosteps              =    16
   pistonMicroStepsPerRev        = pistonMicrosteps * pistonStepsPerRev  // = 3200 [uS/rev]
   pistonMicroStepsPerMM         = 1000 * pistonMicroStepsPerRev / pistonFeedPerRevolution // = 656
// GB_microL_per_100mm_current    =  6522
   PISTON_POS_COORD              =     3
   GB_PistonHomePos       = 48         // for empty syringe ~1300
   BUMP_DOWN_REL                 =  1600 // (done) 0.15 mL
   PISTON_BACKLASH               =     0 // (done) will be added to the "70%" push back = 60[uL]
   PISTON_MORE                   =  6000 // (done) to the draw and then pushed back    = 300[uL]
   STBY_CURRENT_PIST             =    25 ///
   MAX_POS_SPEED_PIST            =   800 ///
   MAX_POS_SPEED_PIST_SLOW       =   300
   ACC_PIST                      =   200 ///
   SEARCH_SPEED_PIST             =   800 ///
   SWITCH_SPEED_PIST             =    40 ///
   MAX_CURRENT_PIST              =   128 ///

GB_75                          = 75
GB_pistonMicroStepPer100microL = 76 // 10000 * pistonMicroStepsPerMM / GB_microL_per_100mm_current = 1041
GB_77                          = 77 //
GB_78                          = 78
GB_79                          = 79


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// GB_Motor_4 = M_headRotateMotor
   rotateGearRatio               =     10
   rotateMicrosteps              =     16
   rotateStepsPerRev             =    200
   needleRotationRadius          =    -40  // mm for to syringe's shoulder
                                           // syringe length and needle length will be added
   rotateMicroStepsPerRev        = rotateGearRatio * rotateStepsPerRev * rotateMicrosteps // = 32000
   rotateMicroStepsPerDeg        = rotateMicroStepsPerRev / DegreePerRev // 89
   rotateMicroStepsPerMM         = rotateMicroStepsPerRev / (2 * needleRotationRadius * 314 / 100) ///  22 [us/mm]
   
   ROTATE_POS_COORD              =      4
   GB_HeadRotateHomePos    = 49          // center of syringe cap   ~ 160
   HEAD_ROTATE_NEEDLE_SEARCH     =  31920 // 32000 // relative to cap place.
                                                   //  later will move more by GB_HeadRotateHomePos
   HEAD_ROTATE_CALIBRATOR_CHECK  =  16000 /// points to the right 90 degrees
   GB_CenterOfVial         = 50           // at the top  ~ 32150
//   AVERAGE_CENTER_VIAL_WEIGHT    =    100
   RE_CALC_CENTER_OF_VIAL_LIMIT  =     60
   NEEDLE_TO_HOME                = -31400 ///
   ACC_ROT                       =     20 ///
   STBY_CUR_ROTATE_LOW           =     10 // after ABORT
   STBY_CUR_ROTATE               =    100 /// normal
   STBY_CUR_ROTATE_HIGH          =    200 // while syringe loading
// MAX_POS_SPEED_VER_ROT         =   1300 /// needs same speed for vertical and rotation for coordinated move
   SEARCH_SPEED_ROT              =   1000 ///
   SWITCH_SPEED_ROT              =    500 ///
   SEARCH_SPEED_ROT_SLOW         =    200
   SWITCH_SPEED_ROT_SLOW         =    100 // 20
   WAIT_NEEDLE_REF               =     90 // 0.8 [S]
   MAX_CURRENT_ROT               =    128 ///
   randomStepsToMove             =     28 // 0.7 mm, the needle enters the vial at random location +- randomStepsToMove
   limitUMbentNeedle             =   3000 // 1650 // [um]
   limitNeedleBentMicroS         =  rotateMicroStepsPerMM * limitUMbentNeedle / 1000  /// 3.0 [mm] // 2.0 [mm] = 88 us

GB_lastTopRefPosition         = 80
GB_rotateMicroStepsPerMM      = 81 ///
GB_limitNeedleBentMicroS      = 82 ///
GB_NeedleVialError            = 83  // for vial center calculation
GB_84                         = 84

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// GB_Motor_5 = M_disposeMotor
   disposeFeedPerRevolution       =  8000  // micrometer
   disposeStepsPerRev             =   200
   disposeMicrosteps              =    16
   disposeMicroStepsPerRev        = disposeMicrosteps * disposeStepsPerRev  // = 3200 [uS/rev]
   disposeMicroStepsPerMM         = 1000 * disposeMicroStepsPerRev / disposeFeedPerRevolution // = 400
//   DISPOSE_POS_COORD              =     5
//   DISPOSE_BACKLASH               =     0 // (done) will be added to the "70%" push back = 60[uL]
//   DISPOSE_MORE                   =  6000 // (done) to the draw and then pushed back    = 300[uL]
   STBY_CURRENT_DISPOSE           =    25 ///
   MAX_POS_SPEED_DISPOSE          =   200 ///
   BOTTLE_FALL_DISPOSE            =  5000
   ACC_DISPOSE                    =   200 ///
   SEARCH_SPEED_DISPOSE           =   100 ///
   SWITCH_SPEED_DISPOSE           =    20 ///
   MAX_CURRENT_DISPOSE            =   128 ///

GB_85                       = 85
GB_86                       = 86

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// GB_Motor_6 = M_capHolderMotor
   capHolderFeedPerRevolution       =  8000  // micrometer
   capHolderStepsPerRev             =   200
   capHolderMicrosteps              =     2
   capHolderMicroStepsPerRev        = capHolderMicrosteps * capHolderStepsPerRev  // = 400 [uS/rev]
   capHolderMicroStepsPerMM         =  1000 * capHolderMicroStepsPerRev / capHolderFeedPerRevolution // = 50
   CAP_HOLDER_HOME                  =  1000
   CAP_WAIT_LOOPS                   = 10000
   DISABLE_SENSOR                   =     1

 //  GB_UnitsToMoveManual     =  19    // for movement, put here the microMeters. upwards is negative.

GB_CapHolderPulses          = 87
GB_slowCapHolder            = 88
GB_capWaitLoops             = 89
GB_CapLimitSwitchDisable    = 90

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// parameters for CM
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// microLtoWithdraw values
GB_microLtoWithdraw_1        =  91
GB_microLtoWithdraw_2        =  92
GB_microLtoWithdraw_3        =  93
GB_microLtoWithdraw_4        =  94
GB_microLtoWithdraw_5        =  95
GB_microLtoWithdraw_6        =  96

GB_97                        =  97
GB_98                        =  98
GB_99                        =  99
GB_100                       = 100

// vialSize_mL values
GB_vialSize_mL_1             = 101
GB_vialSize_mL_2             = 102
GB_vialSize_mL_3             = 103
GB_vialSize_mL_4             = 104
GB_vialSize_mL_5             = 105
GB_vialSize_mL_6             = 106

GB_107                       = 107
GB_108                       = 108
GB_109                       = 109
GB_110                       = 110

GB_rotateVialsDown           = 111
GB_112                       = 112
GB_113                       = 113

// vibration time for vials [seconds]
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_vibrationTime_4           = 114
GB_vibrationTime_4_calc      = 115
GB_vibrationTime_56          = 116
GB_vibrationTime_56_calc     = 117
GB_118                       = 118

// vibration strength for vials 4,56 -  1 / 2 / 3 /4 /5
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  STRENGTH_1                       =  3 // % pwm
  STRENGTH_2                       =  6 // % pwm
  STRENGTH_3                       =  9 // % pwm
  STRENGTH_4                       = 12 // % pwm
  STRENGTH_5                       = 15 // % pwm
GB_vibrationStrengthPercent  = 119      // set up %
GB_PwmDutyCycleMS            = 120      // calculated [ms]
GB_vibrator4done             = 121
GB_vibrator56done            = 122
GB_vibrationStrengthLevel    = 123      // 1/2/3/4/5

// vibration cycle time for vials 4,56 - [ms]
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_vibrationCycleMS          = 124   // calculation to ms
GB_vibrationHz               = 125   // data input
GB_126                       = 126
GB_127                       = 127
GB_128                       = 128



// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// tempory global parameters for calibration restore
GB_VerticalHomePosRestore        =  170    // position for rotation adjustment
GB_LoadingHightRestore           =  171    // syringe loading
GB_BumpPosVertRestore            =  172    // needle touches the vial rubber
GB_173                           =  173
GB_174                           =  174    // to hold the cap for recap
GB_CapHoldsSyringeRestore        =  175
GB_PistonHomePosRestore          =  176    // for empty syringe
GB_HeadRotateHomePosRestore      =  177    // center of syringe cap
GB_CenterOfVialRestore           =  178    // at the top

GB_DrawWaitTime                  =  189    // = 200 = 2[s]
GB_190                           =  190    //
GB_inHomeCapHolderMotor          =  191    // signals when to check  3times for syringe poped out
//GB_MulCenterOfVial               =  192    // for running average calculations
GB_adjustmentsTotal              =  193
GB_TouchedLeftRef                =  195
GB_dipperInterruptHight          =  196

GB_InterruptCount                =  255    // temorary variable 5


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// CODE STARTS HERE
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// subroutines initialize from PC  // "starting address":

FUNC_0:    CSUB FIRST_RUN         //v  will run on power ON
           JA   BACK_GROUND_PROCESS
FUNC_2:    CSUB dummy_sub         //v  Will test all axis and sensors
           JA   BACK_GROUND_PROCESS
FUNC_4:    JA   CLEAR_ALL_ERRORS  //v  resets all errors to start. JA because of the RST function that clears stack any way
           JA   BACK_GROUND_PROCESS
FUNC_6:    CSUB INIT_DRAW_DOSE    //  Run the initial setup, detect if there is a initial volume in the system
           JA   BACK_GROUND_PROCESS
FUNC_8:    CSUB DRAW_DOSE         //  Draw the requested activity
           JA   BACK_GROUND_PROCESS
FUNC_10:   CSUB CHECK_DONE        //  ok, 
           JA   BACK_GROUND_PROCESS
func_12:   CSUB ABORT             //  stop all motors and program
           JA   BACK_GROUND_PROCESS
func_14:   CSUB VERIFY_READY_DRAW //  checks if the vial' syrine ready to draw
           JA   BACK_GROUND_PROCESS
FUNC_16:   CSUB INIT              //v  Initialize parameters.
           JA   BACK_GROUND_PROCESS
func_18:   CSUB FIND_HOMES
           JA   BACK_GROUND_PROCESS
func_20:   CSUB HomeCalibration
           JA   BACK_GROUND_PROCESS
func_22:   CSUB LEDS_OFF
           JA   BACK_GROUND_PROCESS
func_24:   CSUB RED_ON
           JA   BACK_GROUND_PROCESS
func_26:   CSUB GREEN_ON
           JA   BACK_GROUND_PROCESS
func_28:   CSUB YELLOW_ON
           JA   BACK_GROUND_PROCESS

func_30:   CSUB positionVerticalMotor  // will not search bottom side. for debugging
           JA   BACK_GROUND_PROCESS
func_32:   CSUB initInterrups
           JA   BACK_GROUND_PROCESS
func_34:   CSUB dummy_sub
           JA   BACK_GROUND_PROCESS
func_36:   CSUB dummy_sub
           JA   BACK_GROUND_PROCESS
func_38:   CSUB PositionHeadRotateMotor
           JA   BACK_GROUND_PROCESS
func_40:   CSUB verticalMotorTOerr
           JA   BACK_GROUND_PROCESS
func_42:   CSUB dummy_sub
           JA   BACK_GROUND_PROCESS
func_44:   CSUB capHolderMotorTOerr
           JA   BACK_GROUND_PROCESS
func_46:   CSUB pistonMotorTOerr
           JA   BACK_GROUND_PROCESS
func_48:   CSUB headRotateMotorTOerr
           JA   BACK_GROUND_PROCESS
func_50:   CSUB verticalMotorTOerr
           JA   BACK_GROUND_PROCESS
func_52:   CSUB capHolderMotorTOerr
           JA   BACK_GROUND_PROCESS
func_54:   CSUB pistonMotorTOerr
           JA   BACK_GROUND_PROCESS
func_56:   CSUB headRotateMotorTOerr
           JA   BACK_GROUND_PROCESS
func_58:   CSUB homeHeadRotateMotor
           JA   BACK_GROUND_PROCESS

// for FUNC_6  (INIT_DRAW_DOSE)

func_60:   CSUB checkSyringeSensor
           JA   BACK_GROUND_PROCESS
func_62:   CSUB checkNoSyringe
           JA   BACK_GROUND_PROCESS
func_64:   CSUB dummy_sub
           JA   BACK_GROUND_PROCESS
func_66:   CSUB checkSyrPoppedOut
           JA   BACK_GROUND_PROCESS
func_68:   CSUB dummy_sub
           JA   BACK_GROUND_PROCESS

// for FUNC_8   (DRAW_DOSE)

func_70:   CSUB dummy_sub
           JA   BACK_GROUND_PROCESS
func_72:   CSUB startPullAir70
           JA   BACK_GROUND_PROCESS
func_74:   CSUB decapSyringe
           JA   BACK_GROUND_PROCESS
func_76:   CSUB moveBelowVial
           JA   BACK_GROUND_PROCESS
func_78:   CSUB insertNeedle
           JA   BACK_GROUND_PROCESS
func_80:   CSUB push70air
           JA   BACK_GROUND_PROCESS
func_82:   CSUB drawVial
           JA   BACK_GROUND_PROCESS
func_84:   CSUB ClearRunningErrors    //v
           JA   BACK_GROUND_PROCESS
func_86:   CSUB moveSlowlyBottom
           JA   BACK_GROUND_PROCESS
func_88:   CSUB bumpPlunger
           JA   BACK_GROUND_PROCESS
func_90:   CSUB recapSyringe
           JA   BACK_GROUND_PROCESS
func_92:   CSUB dummy_sub
           JA   BACK_GROUND_PROCESS
func_94:   CSUB dummy_sub
           JA   BACK_GROUND_PROCESS
func_96:   CSUB dummy_sub
           JA   BACK_GROUND_PROCESS
func_98:   CSUB startPullAir70
           JA   BACK_GROUND_PROCESS
func_100:  CSUB drawVialMoreBack
           JA   BACK_GROUND_PROCESS
func_102:  CSUB homeVerticalMotor
           JA   BACK_GROUND_PROCESS
func_104:  CSUB homePistonMotor
           JA   BACK_GROUND_PROCESS
func_106:  CSUB setCenterOfSeptum
           JA   BACK_GROUND_PROCESS
func_108:  CSUB findCenterCapHolderManual
           JA   BACK_GROUND_PROCESS

// for FUNC_10   (CHECK_DONE)

func_110:  CSUB dummy_sub
           JA   BACK_GROUND_PROCESS
func_112:  CSUB incrementCycles
           JA   BACK_GROUND_PROCESS

// more functions

func_114:  CSUB Vibrate
           JA   BACK_GROUND_PROCESS
func_116:  CSUB checkVialPoppedOut
           JA   BACK_GROUND_PROCESS
func_118:  CSUB getRandom
           JA   BACK_GROUND_PROCESS
func_120:  CSUB stopVibrate
           JA   BACK_GROUND_PROCESS
func_122:  CSUB homeCapHolderMotor
           JA   BACK_GROUND_PROCESS
func_124:  CSUB startHomePistonMotor
           JA   BACK_GROUND_PROCESS
func_126:  CSUB defaultVibrate
           JA   BACK_GROUND_PROCESS
func_128:  CSUB waitHomePistonMotor
           JA   BACK_GROUND_PROCESS
func_130:  CSUB findCapHolderAtNeedle
           JA   BACK_GROUND_PROCESS
func_132:  CSUB homeCapHolderMotor
           JA   BACK_GROUND_PROCESS

// manual movements functions

func_134:  CSUB dummy_sub
           JA   BACK_GROUND_PROCESS
func_136:  CSUB VerticalManual
           JA   BACK_GROUND_PROCESS
func_138:  CSUB dummy_sub
           JA   BACK_GROUND_PROCESS
func_140:  CSUB CapHolderManual
           JA   BACK_GROUND_PROCESS
func_142:  CSUB PistonManual
           JA   BACK_GROUND_PROCESS
func_144:  CSUB RotationManual
           JA   BACK_GROUND_PROCESS
func_146:  CSUB DoseCalibratorCheck
           JA   BACK_GROUND_PROCESS
func_148:  CSUB dummy_sub
           JA   BACK_GROUND_PROCESS

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    STOP     // just in case
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// The subroutines start here  **
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

dummy_sub:                  // for dummy subroutines
   RSUB

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// run this whenever no function is running
// this will enable the interrupts
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++

BACK_GROUND_PROCESS:
    JA      BACK_GROUND_PROCESS
   
