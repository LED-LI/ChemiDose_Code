//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Definitions of motor numbers & home sensors
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
M_verticalMotor    = 0    // refL                    up down
M_linearMotor      = 1    // refL, refR              linear movement between vials
M_armMotor         = 2    // refL                    move vials from top to bottom
M_pistonMotor      = 3    // refL, syringe(RefR)     fill syringe
M_headRotateMotor  = 4    // refL                    rotate head top to bottom
M_disposeMotor     = 5    // refL                    push vials out from the machine
M_capHolderMotor   = 6    // sensor at In_capHolderHome. separate motor driver
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Definitions of Inputs
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
In_capHolderHome       = 0 // U10
In_pwrDrawer           = 1 // U38
In_NeedleDetected      = 2 // U11
In_3                   = 3 // U36
In_slidingDoor         = 4 // U45
In_drawerOverflow      = 5 // U15
In_drawerClose         = 6 // U14
In_7                   = 7 // U25
// bottles sensors via relay multiplexers
InX_salineBagIsIn        = 0 // U44
InX_vialIsIn1            = 1 // U16
InX_vialIsIn2            = 2 // U46
InX_vialIsIn3            = 3 // U37
InX_vialIsIn4            = 4 // U47
InX_vialIsIn5            = 5 // U48
InX_vialIsIn6            = 6 // U33
InX_mux7                 = 7 // U30
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Definitions of Outputs
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Out_GreenLED           = 0 //  yellow color when both red and green are on
Out_RedLED             = 1 //
Out_PulseCapHolder     = 2 //  for capHolder motor
Out_VibrateDIR         = 3 //  outputs DIR for 2 vibrators
Out_CAPHolderDIR_Down  = 4 //  1A  output DIR for for capHolderMotor
Out_enaVibrate_4       = 5 //  enable vibrator 4 (bottle   4)
Out_enaVibrate_56      = 6 //  enable vibrator 56 (bottles 56)
Out_Multiplexer        = 7 //  1A AND drawer enable
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Defines
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
VIAL_IS_LOADED        =    1
SYRINGE_IN_PLACE      =    1
ANY_ERROR_EXISTS      =    1
WAIT_TICKS_200ms      =   20 // [200ms]
WAIT_TICKS_VERY_SHORT =  100 // [ 1s]
WAIT_TICKS_2S         =  200 // [ 2s]
WAIT_TICKS_4S         =  400 // [ 4s]
WAIT_TICKS_DISPOSE    =  300 // [ 3s]
WAIT_TICKS_ARM        = 2000 // [20s]
WAIT_TICKS            = 1000 // [10s]
WAIT_TICKS_LINEAR     = 1500 // [15s]
WAIT_TICKS_LONG       = 1500 // [15s]
WAIT_TICKS_FILL_VIAL  = 4000 // [40s]
WAIT_TICKS_DRAW       = 4000 // [40s]
LED_ON                =    1
LED_OFF               =    0
DEF_DRAW_WAIT_TIME_25M_22G    =  200   // default for 25 mm needle length and 22 Gauge = 2[s]
DEFAULT_NEEDLE_LENGTH =   25
DEFAULT_DRAW_VOLUME   = 1000  // 1[ml]
CAP_SENSOR_BLOCKED    =    0
MINIMUM_DRAW_VOLUME   =  500  // not less than 0.1 ml
LAST_VIAL             =    6
FIRST_VIAL_FILL       =    4
FIRST_VIAL_VIBRATE    =    4
OVERFLOW              =    0 // the sesor sees vials in the drawer
DRAWER_IS_CLOSED      =    1
DOOR_IS_CLOSED        =    1
//CM
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// User variables map (bank 2)
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// prameters from Trinamic to PC:
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// GB_currentVersion = 0 // Current SW version // moved to GB_222
GB_0                         =   0
GB_Syringe_Type              =   1
GB_2                         =  2        // = 100 = 1[s]
GB_3                         =  3        //  GB_InitDone = 3  // INIT_MOTORS (func 0) done. starts automaticaly
GB_4                         =  4        //
GB_5                         =  5        //
GB_RobotSerialNumber         =   6    // (2030006)  2 = CM, 03 = HW ver,  0006 = machine #) // Write serial number -> will be set by calibration on GB_6
GB_7                         =   7
// the following 2 global parameters will appear at motor 0 (vertical)
// GB_verticalCapPos         =   8   // syringe loading
// GB_BumpPosVert            =   9   // needle touches the vial 1 rubber at top ~ -8792
GB_needleLength            =  10    // 16, 25, 40 [mm]
GB_needleGauge             =  11    // 14, 16, 18, 21, 22, 23 [gauge]
GB_cyclesTotal             =  12    //
// GB_setBumpBottom        =  13    // needle touches the vial 4 rubber at bottom
GB_14                      =  14    //
GB_15                      =  15    //
GB_16                      =  16    //
GB_17                      =  17    //
GB_18                      =  18    //
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//  prameters from PC to Trinamic:
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_19                        =  19
GB_ShowOverride              =  20    // 1 = will not dispose vials and also loop DRAW_DOSE function // ??? (GP 28  error)
GB_21                        =  21
GB_disposeYN                 =  22    //
// GB_DisposeDropVialsPos    =  23    //
// GB_DisposeDropVials456Pos =  24    // arm at disposal position for vials 4 5 6
GB_25                        =  25
GB_26                        =  26
GB_27                        =  27
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// CM Errors
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_errors_syringe_bag   =  28
 // bit errors for parameter 28
    BitEr_bagIsMissing        = %00000000001 // bit    1
    BitEr_syringePoppedOut    = %00000000010 // bit    2  syringe popped out during cycle
    BitEr_volumeExceedsBag    = %00000000100 // bit    4
    BitEr_SyringeIsIn         = %00000001000 // bit    8  FIND_HOMES error or INIT_DRAW_DOSE, Syringe is in the system
    BitEr_SyringeMissing      = %00000010000 // bit   16  DRAW_DOSE error, missing the syringe
    BitEr_machineAborted      = %00000100000 // bit   32
    BitEr_g7                  = %00001000000 // bit   64
    BitEr_g8                  = %00010000000 // bit  128
    BitEr_g9                  = %00100000000 // bit  256
GB_any_Error               =  29    // any error occured
GB_errors_M_verticalMotor       = 30
GB_errors_M_linearMotor         = 31
GB_errors_M_armMotor            = 32
GB_errors_M_pistonMotor         = 33
GB_errors_M_headRotateMotor     = 34
GB_errors_M_disposeMotor        = 35
GB_errors_M_capHolderMotor      = 36
 //  motor errors for  parameters 30-36 Motors
    BitEr_leftRefSensor  =  %00000001 // bit   1  left ref sensor
    BitEr_rightRefSensor =  %00000010 // bit   2  right ref sensor
    BitEr_homeNotFound   =  %00000100 // bit   4  did not find home
    BitEr_TimeOut        =  %00001000 // bit   8
//  BitEr_calibrationErr =  %00010000 // bit  16
    BitEr_m6             =  %00100000 // bit  32
    BitEr_m7             =  %01000000 // bit  64
    BitEr_m8             =  %10000000 // bit 128
GB_errors_Vial_1                = 37
GB_errors_Vial_2                = 38
GB_errors_Vial_3                = 39
GB_errors_Vial_4                = 40
GB_errors_Vial_5                = 41
GB_errors_Vial_6                = 42
 // bit errors for parameter 37-42 Vials
    BitEr_VialTooSmall      = %00000000001 // bit    1
    BitEr_VialMissing       = %00000000010 // bit    2
    BitEr_VialPoppedOut     = %00000000100 // bit    4  vial popped out during cycle
    BitEr_v4                = %00000001000 // bit    8
    BitEr_v5                = %00000010000 // bit   16
    BitEr_v6                = %00000100000 // bit   32
    BitEr_v7                = %00001000000 // bit   64
    BitEr_v8                = %00010000000 // bit  128
GB_errors_findHome              = 43
 // bit errors for parameter 43
    BitEr_syringeIsInwhileFindHome      =  %00000001 // bit   1
    BitEr_h2                            =  %00000010 // bit   2
    BitEr_capHolderIsInWhileFindHome    =  %00000100 // bit   4
    BitEr_h4                            =  %00001000 // bit   8
    BitEr_h5                            =  %00010000 // bit  16
    BitEr_h6                            =  %00100000 // bit  32
    BitEr_h7                            =  %01000000 // bit  64
    BitEr_h8                            =  %10000000 // bit 128
GB_errors_wrong_PC_command      = 44
 // bit errors for parameter 44
    BitEr_expecting_GP5_10_OR_30        =  %00000001 // bit   1
    BitEr_expecting_WAITING_DISPENSE    =  %00000010 // bit   2
    BitEr_c3                            =  %00000100 // bit   4
    BitEr_vibrateParemeterError         =  %00001000 // bit   8
    BitEr_c5                            =  %00010000 // bit  16
    BitEr_c6                            =  %00100000 // bit  32
    BitEr_c7                            =  %01000000 // bit  64
    BitEr_c8                            =  %10000000 // bit 128
GB_special_Error                =  45
//  motor errors parameter 45
    BitEr_slidingDoorIsOpen   =  %00000001 // bit   1
    BitEr_drawerOverflow      =  %00000010 // bit   2
    BitEr_No_vials            =  %00000100 // bit   4  DRAW_DOSE error, missing the vial
    BitEr_drawerIsOpen        =  %00001000 // bit   8
    BitEr_vialNotDefined      =  %00010000 // bit  16
    BitEr_s5                  =  %00100000 // bit  32
    BitEr_s6                  =  %01000000 // bit  64
    BitEr_s7                  =  %10000000 // bit 128
// the following global parameters will appear at their motor
// GB_RecapPositionlinear          = 46   // to hold the cap for recap
// GB_ArmVialPosition              = 47   // cap holder is under the syringe
// GB_PistonHomePos                = 48   // for empty syringe
// GB_HeadRotateHomePos            = 49   // center of syringe cap
// GB-50                           = 50   // at the top
// GB_SetVial4BottomLinear         = 51   // linear motor
// GB_headAtBottom                 = 52
// GB_linearCenterOfVial1          = 53
// GB_linearLoading                = 54  //// GB_CapLimitSwitchDisable        = 54 /// ???  //// L.E.D ////
// GB_armAtBottom                  = 55    //
// 55 is the last GB that can also be stored permanently in the EEPROM
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// motor parameters
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Motor_0 = M_verticalMotor
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_verticalCapPos                      =   8 // syringe loading  380
GB_BumpPosVert                         =   9 // needle touches the vial 1 rubber at top ~ -8792
GB_setBumpBottom                       =  13 // needle touches the vial 4 rubber at bottom
GB_needleLengthInMicroSteps            =  60 // verticalMicroStepsPerMM * GB_needleLength = 5039 [steps] for 40 [mm]
GB_Calced_Top_Vert_Needle_Down_Allowed =  61 // GB_61 = 61
GB_62                         = 62
GB_63                         = 63
GB_64                         = 64
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Motor_1 = M_linearMotor
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_SetVial4BottomLinear         =    51
GB_linearCenterOfVial1          =    53      //
GB_linearLoading                =     54      //
GB_currentVialLinearLocation    =    65
GB_LinearCenterOfBag            =    66
GB_67                           =    67
GB_68                           =    68
GB_69                           =    69
// ++++++++++++++++++++++++++++++++
// Motor_2 = M_armMotor
// ++++++++++++++++++++++++++++++++
GB_DisposeDropVials456Pos    =    24           // arm at disposal position for vials 4 5 6
GB_ArmVialPosition           =    47           // arm holder is above the syringe  -460
GB_armAtBottom               =    55           //  15546  Arm at bottom just below syring
GB_armMicroStepsPerMM        =    70           // 31
//GB_limitarmBentMicroS      =    71
//GB_NeedleArmError          =    72          // error of needle at calholder position
GB_73                        =    73
GB_74                        =    74
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Motor_3 = M_pistonMotor
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_PistonHomePos                 =    48         // for empty syringe 345 [0] => need to redesign - adujstment to new syringe holder and diferent syringes
// GB_microL_per_100mm_current   =   161       // 6522
GB_DrawWaitTime                  =    75
GB_pistonMicroStepPer100microL   =    76 // 10000 * pistonMicroStepsPerMM / GB_microL_per_100mm_current = 224
GB_77                            =    77 //
GB_78                            =    78
GB_79                            =    79
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Motor_4 = M_headRotateMotor
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_HeadRotateHomePos             = 49          // center of cap  16232 // 16240
GB_headAtBottom                  = 52
GB_80                            = 80
GB_rotateMicroStepsPerMM         = 81
//GB_limitNeedleBentMicroS         = 82
GB_NeedleVialError               = 83  // for vial center calculation
GB_84                            = 84
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Motor_5 = M_disposeMotor
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_51                 = 51  // not used
GB_DisposeDropVialsPos            = 23
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Motor_6 = M_capHolderMotor
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// GB_CapLimitSwitchDisable    = 54  // was erased once //// L.E.D ////
GB_CapHolderHolds           = 86  //  "1" = holds,    "0" = open
GB_CapHolderPulses          = 87
GB_slowCapHolder            = 88
GB_capWaitLoops             = 89
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// parameters for CM
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// microLtoWithdraw values
GB_microLtoWithdraw_current  =  90
GB_microLtoWithdraw_1        =  91
GB_microLtoWithdraw_2        =  92
GB_microLtoWithdraw_3        =  93
GB_microLtoWithdraw_4        =  94
GB_microLtoWithdraw_5        =  95
GB_microLtoWithdraw_6        =  96
// TODO
//GB_currentVolume_microL_1        =  TBD
//GB_currentVolume_microL_2        =  TBD
//GB_currentVolume_microL_3        =  TBD
//GB_currentVolume_microL_4        =  TBD
//GB_currentVolume_microL_5        =  TBD
//GB_currentVolume_microL_6        =  TBD
GB_CmdInProcess              =  97
// SW states
  GB_CurrentState       =  98        // defines the current state of the process
       WAITING_INIT_CM       = 10   // this is the state after the power up as well
       RUNNING_INIT_CM       = 20
       WAITING_DISPENSE      = 30   // at this state it is possible as well to run INIT_DRAW_DOSE (6)
       RUNNING_DISPENSE      = 40
       STATE_50              = 50
       STATE_60              = 60
       STOPPED_ON_ERROR      = 70
       STOPPED_TIME_OUT      = 80
       ABORTED               = 90
GB_microLinBAG               =  99
GB_moveManualBackwards       = 100    // 1 = forward;  -1 = backward
// vialSize_microL values
GB_vialSize_microL_1             = 101
GB_vialSize_microL_2             = 102
GB_vialSize_microL_3             = 103
GB_vialSize_microL_4             = 104
GB_vialSize_microL_5             = 105
GB_vialSize_microL_6             = 106
GB_vialSize_microL_current   = 107
GB_BagSize_microL            = 108
GB_109                       = 109
GB_110                       = 110
GB_rotateVialsDown           = 111
    Bit_vibrate0      =  %00000001 // bit   1
    Bit_vibrate1      =  %00000010 // bit   2
    Bit_vibrate2      =  %00000100 // bit   4
    Bit_vibrate3      =  %00001000 // bit   8
    Bit_vibrate4      =  %00010000 // bit  16
    Bit_vibrate5      =  %00100000 // bit  32
GB_vibration4IsNeeded        = 112
GB_vibration56IsNeeded       = 113
// vibration time for vials [seconds]
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_vibrationTime_4           = 114
GB_vibrationTime_4_calc      = 115
GB_vibrationTime_56          = 116
GB_vibrationTime_56_calc     = 117
GB_vibrationLocation         = 118
    Bit_vibrateUp        =  %00000001 // bit   1
    Bit_vibrateDown      =  %00000010 // bit   2
    Bit_vibrateHalfway   =  %00000100 // bit   4
    Bit_vibrateLocation3 =  %00001000 // bit   8
    Bit_vibrateLocation4 =  %00010000 // bit  16
    Bit_vibrateLocation5 =  %00100000 // bit  32
// vibration strength for vials 4,56 -  1 / 2 / 3 / 4 / 5
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_vibrStrengthPercentCalc   = 119      // set up %
GB_PwmDutyCycleMS            = 120      // calculated [ms]
GB_vibrator4done             = 121
GB_vibrator56done            = 122
GB_vibrationDutyCyclePercent = 123      // 10-100 [%]
// vibration cycle time for vials 4,56 - [ms]
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_vibrationCycleMS          = 124   // calculation to ms
GB_vibrationHz               = 125   // data input
GB_126                       = 126
GB_vibrationIsNeeded         = 127
GB_128                       = 128
// microLtoFill values
GB_microLtoFill_current     =  130
GB_microLtoFill_1           =  131 //// L.E.D //// for possible future use
GB_microLtoFill_2           =  132 //// L.E.D //// for possible future use
GB_microLtoFill_3           =  133 //// L.E.D //// for possible future use
GB_microLtoFill_4           =  134
GB_microLtoFill_5           =  135
GB_microLtoFill_6           =  136
//GB_microLtoFill_1           =  131 //// L.E.D //// for possible future use
//GB_microLtoFill_2           =  132 //// L.E.D //// for possible future use
//GB_microLtoFill_3           =  133 //// L.E.D //// for possible future use
//GB_microLtoFill_4           =  134
//GB_microLtoFill_5           =  135
//GB_microLtoFill_6           =  136
GB_FillingIsNeeded           = 140
GB_Filling1IsNeeded          = 141 //// L.E.D //// for possible future use
GB_Filling2IsNeeded          = 142 //// L.E.D //// for possible future use
GB_Filling3IsNeeded          = 143 //// L.E.D //// for possible future use
GB_Filling4IsNeeded          = 144
GB_Filling5IsNeeded          = 145
GB_Filling6IsNeeded          = 146
// current syringe
GB_Max_Volume_current        = 160
GB_microL_per_100mm_current  = 161
GB_Syring_Length_current     = 162
GB_readyToFill               = 163
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_GoToAbsoluteInSteps           =  182
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_numberOfKicks                 =  183    //  10
GB_rotateBubblesUM               =  184    // 750 = 0.75mm
GB_pistonBubblesPullMicroL       =  185    // 300 * microL = 0.3ml
GB_pistonBubblesPushMicroL       =  186    // 150 * microL = 0.3ml
GB_dispenseCycleTime01s          =  187
GB_dispenseCycleTimeMS           =  188
GB_PigWasReplaced                =  190    //
GB_inHomeCapHolderMotor          =  191    // signals when to check 3 times for syringe poped out
GB_MulCenterOfVial               =  192    // for running average calculations
GB_adjustmentsTotal              =  193
GB_TouchedLeftRef                =  195
GB_dipperInterruptHight          =  196
GB_microLinVial_1                =  197
GB_microLinVial_2                =  198
GB_microLinVial_3                =  199
GB_microLinVial_4                =  200
GB_microLinVial_5                =  201
GB_microLinVial_6                =  202
GB_microLinVial_current          =  203
GB_current_Vial                  =  204
// the following definitions will be loaded on the bit definitions GB
// when checkin vial existance, these definitions will be used as AND on the GB_vialsExist parameter
GB_vial1Bit   =  211  //  VIAL1_BIT
GB_vial2Bit   =  212  //  VIAL2_BIT
GB_vial3Bit   =  213  //  VIAL3_BIT
GB_vial4Bit   =  214  //  VIAL4_BIT
GB_vial5Bit   =  215  //  VIAL5_BIT
GB_vial6Bit   =  216  //  VIAL6_BIT
GB_BagBit     =  217  //  BAG_BIT
GB_vialsExist                =  218
    Bit_vial1      =  %00000001 // bit   1
    Bit_vial2      =  %00000010 // bit   2
    Bit_vial3      =  %00000100 // bit   4
    Bit_vial4      =  %00001000 // bit   8
    Bit_vial5      =  %00010000 // bit  16
    Bit_vial6      =  %00100000 // bit  32
    Bit_bag        =  %01000000 // bit  64
GB_currentVersion          =  222    // Current SW version
GB_readyToDraw             =  224    // after verifyReady
GB_initialVolume           =  225    // in syringe
GB_MotorIsMoving           =  226    //
GB_HomingDone              =  228    //
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//  prameters from PC to Trinamic:
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
GB_UnitsToMoveManual         =  229    // for manual movement, put here the microMeter or Mili Degree to move (+/-)
GB_TempNumHolder             =  230
GB_airToPullBefore           =  231    // 20 in Percentage. Should be reduced when vial is full
GB_232                       =  232
GB_233                       =  232
GB_234                       =  232
GB_motorNumForHome           =  235    // 0=vertical, 1=linear, 2=arm, 3=piston, 4=rotate, 5=dispose, 6=capHolder
GB_236                       =  236    //
GB_microLbagToFill           =  237    // microL to withdraw in BAG
GB_skipCheckVial456                     =   250
GB_skipCheckBag                         =   251
GB_foundCenterOfNeedle                  =   252
GB_DrawFromVialWaitTime                 =   253  //// L.E.D //// - not sure i still want these ...  //// L.E.D ////
GB_vialsToDrawFromCounter               =   254    // temporary variable  //// L.E.D ////
GB_InterruptCount                =  255    // temorary variable 5
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// CODE STARTS HERE
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// subroutines initialize from PC  // "starting address":
FUNC_0:    CSUB FIRST_RUN         //v  will run on power ON
           JA     backGroundProcess
FUNC_2:    CSUB Draw_654321       // for testing
           JA     backGroundProcess
FUNC_4:    CSUB Eyals_dummy_sub
           JA     backGroundProcess
FUNC_6:    JA   INIT_CM           //  Run the initial setup, detect if there is a initial volume in the system
           JA     backGroundProcess
FUNC_8:    CSUB DRAW_DOSE         //  Draw the requested activity
           JA     backGroundProcess
FUNC_10:   CSUB dropVials
           JA     backGroundProcess
func_12:   CSUB ABORT             //  stop all motors and program
           JA     backGroundProcess
func_14:   CSUB VERIFY_READY_DRAW //  checks if the vial' syrine ready to draw
           JA     backGroundProcess
FUNC_16:   CSUB INIT_MOTORS       //  Initialize parameters.
           JA     backGroundProcess
func_18:   CSUB FIND_HOMES
           JA     backGroundProcess
func_20:   CSUB HomeCalibration
           JA     backGroundProcess
func_22:   CSUB LEDS_OFF
           JA     backGroundProcess
func_24:   CSUB RED_ON
           JA     backGroundProcess
func_26:   CSUB GREEN_ON
           JA     backGroundProcess
func_28:   CSUB YELLOW_ON
           JA     backGroundProcess
func_30:   CSUB positionVerticalMotor  // will not search bottom side. for debugging
           JA     backGroundProcess
func_32:   CSUB initInterrups
           JA     backGroundProcess
func_34:   CSUB verifyVIAL
           JA     backGroundProcess
func_36:   CSUB screenAllVials
           JA     backGroundProcess
func_38:   CSUB PositionHeadRotateMotor
           JA     backGroundProcess
func_40:   CSUB verticalMotorTOerr
           JA     backGroundProcess
func_42:   CSUB homeLinearMotor
           JA     backGroundProcess
func_44:   CSUB capHolderMotorTOerr
           JA     backGroundProcess
func_46:   CSUB pistonMotorTOerr
           JA     backGroundProcess
func_48:   CSUB headRotateMotorTOerr
           JA     backGroundProcess
func_50:   CSUB homeArmMotor
           JA     backGroundProcess
func_52:   CSUB HomeDisposeMotor
           JA     backGroundProcess
func_54:   CSUB incrementCycles
           JA     backGroundProcess
func_56:   CSUB positionLinearMotor
           JA     backGroundProcess
func_58:   CSUB homeHeadRotateMotor
           JA     backGroundProcess
// for FUNC_6  (INIT_CM)
func_60:   CSUB checkSyringeSensor
           JA     backGroundProcess
func_62:   CSUB checkNoSyringe
           JA     backGroundProcess
func_64:   CSUB dummy_sub
           JA     backGroundProcess
func_66:   CSUB checkSyrPoppedOut
           JA     backGroundProcess
// for FUNC_8   (DRAW_DOSE)
func_68:   CSUB moveAboveVial // func_68:   CSUB moveAboveVialFromCenter
           JA     backGroundProcess
func_70:   CSUB dummy_sub               // checkDrawVolume
           JA     backGroundProcess
func_72:   CSUB startPullAir70
           JA     backGroundProcess
func_74:   CSUB deCap
           JA     backGroundProcess
func_76:   CSUB moveBelowVial
           JA     backGroundProcess
func_78:   CSUB insertNeedleIntoVial
           JA     backGroundProcess
func_80:   CSUB push70air
           JA     backGroundProcess
func_82:   CSUB drawVial
           JA     backGroundProcess
func_84:   CSUB ClearRunningErrors
           JA     backGroundProcess
func_86:   CSUB moveSlowlyBottom
           JA     backGroundProcess
func_88:   CSUB bumpPlunger
           JA     backGroundProcess
func_90:   CSUB recapSyringe
           JA     backGroundProcess
func_92:   CSUB startHomeDisposeMotor
           JA     backGroundProcess
func_94:   CSUB insertNeedleIntoVialBelow
           JA     backGroundProcess
func_96:   CSUB positionArmMotor
           JA     backGroundProcess
func_98:   CSUB setTestParams
           JA     backGroundProcess
func_100:  CSUB drawVialMoreBack
           JA     backGroundProcess
func_102:  CSUB homeVerticalMotor
           JA     backGroundProcess
func_104:  CSUB homePistonMotor
           JA     backGroundProcess
func_106:  CSUB positionPistonMotor
           JA     backGroundProcess
func_108:  CSUB ejectSyringeFromTopVial
           JA     backGroundProcess
func_110:  CSUB ejectSyringeFromBottomVial
           JA     backGroundProcess
func_112:  CSUB dummy_sub
           JA     backGroundProcess
// more functions
func_114:  CSUB Vibrate
           JA     backGroundProcess
func_116:  CSUB checkVialPoppedOut
           JA     backGroundProcess
func_118:  CSUB holdCap
           JA     backGroundProcess
func_120:  CSUB stopVibrate
           JA     backGroundProcess
func_122:  CSUB homeCapHolderMotor
           JA     backGroundProcess
func_124:  CSUB startHomePistonMotor
           JA     backGroundProcess
func_126:  CSUB defaultVibrate
           JA     backGroundProcess
func_128:  CSUB dummy_sub
           JA     backGroundProcess
func_130:  CSUB dummy_sub
           JA     backGroundProcess
func_132:  CSUB dummy_sub
           JA     backGroundProcess
// manual movements functions
func_134:  CSUB dummy_sub
           JA     backGroundProcess
func_136:  CSUB VerticalManual
           JA     backGroundProcess
func_138:  CSUB LinearMotorManual
           JA     backGroundProcess
func_140:  CSUB armMotorManual
           JA     backGroundProcess
func_142:  CSUB PistonManual
           JA     backGroundProcess
func_144:  CSUB RotationManual
           JA     backGroundProcess
func_146:  CSUB VerticalManualAbsolute
           JA     backGroundProcess
func_148:  CSUB LinearMotorManualAbsolute
           JA     backGroundProcess
func_150:  CSUB armMotorManualAbsolute
           JA     backGroundProcess
func_152:  CSUB PistonManualAbsolute
           JA     backGroundProcess
func_154:  CSUB RotationManualAbsolute
           JA     backGroundProcess
func_156:  CSUB DisposeManualAbsolute
           JA     backGroundProcess
func_158:  CSUB DisposeManual
           JA     backGroundProcess
func_160:  CSUB CapHolderManual
           JA     backGroundProcess
func_162:  CSUB testCapHolder
           JA     backGroundProcess
func_164:  CSUB dummy_sub
           JA     backGroundProcess
func_166:  CSUB dummy_sub
           JA     backGroundProcess
func_168:  CSUB dummy_sub
           JA     backGroundProcess
func_170:  CSUB dummy_sub
           JA     backGroundProcess
func_172:  CSUB dummy_sub
           JA     backGroundProcess
func_174:  CSUB dummy_sub
           JA     backGroundProcess
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++